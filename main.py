import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv()

# Validate required environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
SUPPORT_USER_ID = os.getenv("SUPPORT_USER_ID")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")
if not PROVIDER_TOKEN:
    raise ValueError("PROVIDER_TOKEN environment variable is required")
if not CHANNEL_ID:
    raise ValueError("CHANNEL_ID environment variable is required")
if not SUPPORT_USER_ID:
    raise ValueError("SUPPORT_USER_ID environment variable is required")

CHANNEL_ID = int(CHANNEL_ID)
SUPPORT_USER_ID = int(SUPPORT_USER_ID)
PRICE = int(os.getenv("PRICE", "30000"))  # —Ü–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ---------- –ú–µ–Ω—é —Å–Ω–∏–∑—É (ReplyKeyboard) ----------
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
    KeyboardButton("‚ÑπÔ∏è –û –∫–∞–Ω–∞–ª–µ")
)
main_menu.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

# ---------- FSM –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ----------
class SupportForm(StatesGroup):
    waiting_for_message = State()

# ---------- Inline-–∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã ----------
buy_inline = InlineKeyboardMarkup()
buy_inline.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    print("user_id:", message.from_user.id)
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")
    
# ---------- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ----------
@dp.message_handler()
async def any_message(message: types.Message):
    if message.text == "üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø":
        await message.answer(
            "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: 300 ‚ÇΩ / –º–µ—Å—è—Ü\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å üëá",
            reply_markup=buy_inline
        )
    elif message.text == "‚ÑπÔ∏è –û –∫–∞–Ω–∞–ª–µ":
        await message.answer(
            "üìò –≠—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.",
            reply_markup=main_menu
        )
    elif message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer(
            "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –Ø –ø–µ—Ä–µ—à–ª—é —ç—Ç–æ –º–æ–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=None  # —Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç
        )
        await SupportForm.waiting_for_message.set()
    else:
        # –ú–µ–Ω—é –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu)

# ---------- Inline-–∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã ----------
@dp.callback_query_handler(lambda c: c.data == "buy")
async def process_buy_callback(callback_query: types.CallbackQuery):
    prices = [LabeledPrice(label="–î–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü", amount=PRICE)]
    await bot.send_invoice(
        callback_query.from_user.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
        description="–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É –Ω–∞ 1 –º–µ—Å—è—Ü",
        payload="subscription_1m",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="subscription"
    )

@dp.pre_checkout_query_handler(lambda q: True)
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    invite = await bot.create_chat_invite_link(chat_id=CHANNEL_ID, member_limit=1)
    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
        f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª:\n{invite.invite_link}",
        reply_markup=main_menu
    )
    
        # ---------- –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ----------
@dp.message_handler(state=SupportForm.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext):
    try:
         print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É: {SUPPORT_USER_ID}")
         print(f"–¢–µ–∫—Å—Ç: {message.text}")
         await bot.send_message(
            SUPPORT_USER_ID,
            f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{message.from_user.username or message.from_user.full_name} (ID {message.from_user.id}):\n\n{message.text}"
        )
         await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å–ø–∞—Å–∏–±–æ!",
            reply_markup=main_menu
        )
    except exceptions.BotBlocked:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    await state.finish()


async def on_startup(dp):
    from aiohttp import web
    
    async def handle(request):
        return web.Response(text="Bot is alive!")
    
    app = web.Application()
    app.router.add_get("/", handle)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=8080)
    await site.start()
    print("üåê Uptime server started on port 8080")

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)