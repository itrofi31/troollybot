import os
import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    LabeledPrice,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils import executor, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

from database import Database
from info import about_text
from admin import register_admin_handlers
from logger_config import setup_logger

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
setup_logger()

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
SUPPORT_USER_ID = int(os.getenv("SUPPORT_USER_ID"))
DEV_USER_ID = int(os.getenv("DEV_USER_ID"))
MONTH_PRICE = int(os.getenv("MONTH_PRICE", "50000"))
FULL_PRICE = int(os.getenv("FULL_PRICE", "150000"))

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ----------
db = Database()
register_admin_handlers(dp, db, SUPPORT_USER_ID, DEV_USER_ID, bot)


# ---------- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î ----------
async def run_db(func, *args, **kwargs):
    return await asyncio.to_thread(func, *args, **kwargs)


# ---------- –ú–µ–Ω—é ----------
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"),
    KeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ"),
    KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
    KeyboardButton("üí≥ –î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü"),
    KeyboardButton("üìö –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
)

buy_month_inline = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="buy_month")
)
buy_full_inline = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="buy_full")
)


# ---------- FSM –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ----------
class SupportForm(StatesGroup):
    waiting_for_message = State()


class PaymentForm(StatesGroup):
    waiting_for_email = State()


# ---------- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ ----------
def user_info(user: types.User):
    return f"{user.id} (@{user.username or user.full_name})"


# ---------- –•—ç–Ω–¥–ª–µ—Ä /start ----------
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    try:
        logging.info(f"/start –æ—Ç {user_info(message.from_user)}")
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu
        )
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ /start –¥–ª—è {user_info(message.from_user)}: {e}", exc_info=True
        )


# ---------- –•—ç–Ω–¥–ª–µ—Ä "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å" ----------
@dp.message_handler(text="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
async def current_status(message: types.Message):
    try:
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info(message.from_user)} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
        )
        user_id = message.from_user.id

        expiry = await run_db(db.get_expiry, user_id)
        full = await run_db(db.has_full_access, user_id)

        info = "üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:"

        if full:
            info += "\n‚úÖ –£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        elif expiry and expiry > datetime.now():
            days_left = (expiry - datetime.now()).days
            info += f"\n‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â—ë {days_left} –¥–Ω–µ–π."
        else:
            info += "\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞üòü."

        # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ç—É—Å
        await message.answer(info, reply_markup=main_menu)

        # –ü–æ—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)
        if not full and (not expiry or expiry < datetime.now()):
            await message.answer(
                f"üí∞ –î–æ—Å—Ç—É–ø –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± –Ω–∞ 30 –¥–Ω–µ–π: {MONTH_PRICE/100:.2f} ‚ÇΩ\n",
                reply_markup=buy_month_inline,
            )
            await message.answer(
                f"üí∞ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: {FULL_PRICE/100:.2f} ‚ÇΩ\n",
                reply_markup=buy_full_inline,
            )

    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ current_status –¥–ª—è {user_info(message.from_user)}: {e}",
            exc_info=True,
        )
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ ----------
@dp.message_handler(text="‚ÑπÔ∏è –û –∫–ª—É–±–µ")
async def info_club(message: types.Message):
    try:
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info(message.from_user)} –æ—Ç–∫—Ä—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ"
        )
        await message.answer(about_text, reply_markup=main_menu, parse_mode="Markdown")
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ info_club –¥–ª—è {user_info(message.from_user)}: {e}",
            exc_info=True,
        )


@dp.message_handler(text="üí≥ –î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü")
async def buy_month(message: types.Message):
    try:
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info(message.from_user)} –æ—Ç–∫—Ä—ã–ª –æ–ø–ª–∞—Ç—É –º–µ—Å—è—Ü–∞"
        )
        await message.answer(
            f"üí∞ –î–æ—Å—Ç—É–ø –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± –Ω–∞ 30 –¥–Ω–µ–π: {MONTH_PRICE/100:.2f} ‚ÇΩ\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å üëá",
            reply_markup=buy_month_inline,
        )
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ buy_month –¥–ª—è {user_info(message.from_user)}: {e}",
            exc_info=True,
        )


@dp.message_handler(text="üìö –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")
async def buy_full(message: types.Message):
    try:
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info(message.from_user)} –æ—Ç–∫—Ä—ã–ª –æ–ø–ª–∞—Ç—É –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        )
        await message.answer(
            f"üí∞ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: {FULL_PRICE/100:.2f} ‚ÇΩ\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å üëá",
            reply_markup=buy_full_inline,
        )
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ buy_full –¥–ª—è {user_info(message.from_user)}: {e}", exc_info=True
        )


@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    try:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info(message.from_user)} –ø–∏—à–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –Ø –ø–µ—Ä–µ–¥–∞–º –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await SupportForm.waiting_for_message.set()
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ support –¥–ª—è {user_info(message.from_user)}: {e}", exc_info=True
        )


# ---------- FSM –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ----------
@dp.message_handler(state=SupportForm.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext):
    try:
        await bot.send_message(
            SUPPORT_USER_ID,
            f"üì© –ó–∞–ø—Ä–æ—Å –æ—Ç {user_info(message.from_user)}:\n\n{message.text}",
        )
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu
        )
        logging.info(
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user_info(message.from_user)}: {message.text}"
        )
    except exceptions.BotBlocked:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.error(
            f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!!! –æ—Ç {user_info(message.from_user)}: {message.text}"
        )
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user_info(message.from_user)}: {e}",
            exc_info=True,
        )
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.finish()


# ---------- Callback –æ–ø–ª–∞—Ç—ã ----------
@dp.callback_query_handler(lambda c: c.data in ["buy_month", "buy_full"])
async def process_buy_callback(callback_query: types.CallbackQuery):
    try:
        subscription_type = callback_query.data
        label = (
            "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø" if subscription_type == "buy_full" else "–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
        )
        amount = FULL_PRICE if subscription_type == "buy_full" else MONTH_PRICE
        prices = [LabeledPrice(label=label, amount=amount)]

        logging.info(
            f"‚û°Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info(callback_query.from_user)} –Ω–∞–∂–∞–ª {callback_query.data}"
        )

        await bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title=label,
            description=f"{label} –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±",
            payload=subscription_type,
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter=subscription_type,
            need_email=True,
            send_email_to_provider=True,
        )
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ –¥–ª—è {user_info(callback_query.from_user)}: {e}",
            exc_info=True,
        )
        await callback_query.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True
        )


# ---------- –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ----------
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    try:
        full_access = message.successful_payment.invoice_payload == "buy_full"
        new_expiry = await run_db(
            db.add_or_update_subscription,
            message.from_user.id,
            message.from_user.username,
            months=1,
            full_access=full_access,
            amount=message.successful_payment.total_amount,
            currency=message.successful_payment.currency,
        )

        invite = await bot.create_chat_invite_link(chat_id=CHANNEL_ID, member_limit=1)
        expiry_text = new_expiry.strftime("%d.%m.%Y") if new_expiry else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"

        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_text}.\n\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{invite.invite_link}",
            reply_markup=main_menu,
        )

        pay = message.successful_payment
        logging.info(
            f"‚úÖ –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê | User {user_info(message.from_user)} | "
            f"{pay.total_amount/100} {pay.currency} | –¢–∏–ø: {pay.invoice_payload}"
        )
    except Exception as e:
        logging.error(
            f"‚ùå –û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã {user_info(message.from_user)}: {e}",
            exc_info=True,
        )
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
        )


# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ ----------
async def check_subscriptions():
    while True:
        try:
            subscriptions = await run_db(db.get_all_subscriptions)

            for (
                user_id,
                username,
                expiry_date,
                full_access,
                status,
                notified,
            ) in subscriptions:
                try:
                    if full_access or not expiry_date:
                        continue
                    expiry = datetime.fromisoformat(expiry_date)
                    days_left = (expiry - datetime.now()).days

                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
                    if days_left == 3 and notified == 0:
                        try:
                            await bot.send_message(
                                user_id,
                                "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è! –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–ª—É–±, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –º–µ—Å—è—Ü.",
                            )
                            await run_db(db.mark_notified, user_id)
                            logging.info(
                                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É {user_info(types.User(id=user_id, username=username, is_bot=False))} –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏"
                            )
                        except exceptions.BotBlocked:
                            logging.warning(
                                f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
                            )
                        except Exception as e:
                            logging.error(
                                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}"
                            )

                    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    elif expiry < datetime.now() and status == "active":
                        try:
                            await bot.ban_chat_member(CHANNEL_ID, user_id)
                            await bot.unban_chat_member(CHANNEL_ID, user_id)
                            logging.info(
                                f"üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ —É {user_id}. –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞."
                            )
                            await bot.send_message(
                                user_id,
                                "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏—Å—Ç–µ–∫. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –æ–ø–ª–∞—Ç–∏–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá.",
                            )
                        except exceptions.BotBlocked:
                            logging.warning(
                                f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
                            )
                        except Exception as e:
                            logging.error(
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}"
                            )

                        await run_db(db.expire_user, user_id)

                except Exception as e:
                    logging.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}",
                        exc_info=True,
                    )
                    continue

            await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å

        except Exception as e:
            logging.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True
            )
            await asyncio.sleep(300)


# ---------- –°—Ç–∞—Ä—Ç ----------
async def on_startup(dp):
    asyncio.create_task(check_subscriptions())
    logging.info("üåê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω.")


if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
