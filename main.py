import os
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

from database import Database  # –†–∞–±–æ—Ç–∞ —Å –ë–î –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª database.py

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    filename="bot_errors.log",       # —Ñ–∞–π–ª, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏
    level=logging.INFO,              # —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
    format="%(asctime)s [%(levelname)s] %(message)s"
)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
SUPPORT_USER_ID = int(os.getenv("SUPPORT_USER_ID"))
MONTH_PRICE = int(os.getenv("MONTH_PRICE", "50000"))      # –ú–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
FULL_PRICE = int(os.getenv("FULL_PRICE", "130000"))  # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
INVITE_LINK = os.getenv("INVITE_LINK")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ----------
db = Database()

async def get_channel_id():
    await bot.send_message(CHANNEL_ID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
# ---------- –ú–µ–Ω—é ----------
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üí≥ –î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü"),
    KeyboardButton("üìö –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"),
    KeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ")
)
main_menu.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

buy_month_inline = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="buy_month")
)
buy_full_inline = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="buy_full")
)

# ---------- FSM –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ----------
class SupportForm(StatesGroup):
    waiting_for_message = State()

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu)

@dp.message_handler()
async def any_message(message: types.Message):
    if message.text.startswith("/"):
        return

    if message.text == "üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü":
        await message.answer(
            f"üí∞ –î–æ—Å—Ç—É–ø –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± –Ω–∞ 30 –¥–Ω–µ–π: {MONTH_PRICE/100:.2f} ‚ÇΩ\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å üëá",
            reply_markup=buy_month_inline
        )
    elif message.text == "üìö –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±":
        await message.answer(
            f"üí∞ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: {FULL_PRICE/100:.2f} ‚ÇΩ\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å üëá",
            reply_markup=buy_full_inline
        )
    elif message.text == "‚ÑπÔ∏è –û –∫–ª—É–±–µ":
        info = (
            "üìò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ø–æ–¥–±–æ—Ä–∫–∏, –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
            "–î–æ—Å—Ç—É–ø –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü: 500 —Ä—É–±.\n"
            "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: 1300 —Ä—É–±.\n"
            "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞."
        )
        expiry = db.get_expiry(message.from_user.id)
        full = db.has_full_access(message.from_user.id)
        if full:
            info += "\n‚úÖ –£ –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        elif expiry and expiry > datetime.now():
            days_left = (expiry - datetime.now()).days
            info += f"\n‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â—ë {days_left} –¥–Ω–µ–π."
        await message.answer(info, reply_markup=main_menu)
    elif message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –Ø –ø–µ—Ä–µ–¥–∞–º –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await SupportForm.waiting_for_message.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu)

# ---------- Callback –æ–ø–ª–∞—Ç—ã ----------
@dp.callback_query_handler(lambda c: c.data in ["buy_month", "buy_full"])
async def process_buy_callback(callback_query: types.CallbackQuery):
    try:
        label = "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø" if callback_query.data == "subscription_full" else "–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"
        amount = 50000 if callback_query.data == "subscription_month" else 150000
        prices = [LabeledPrice(label=label, amount=amount)]
        
        await bot.send_invoice(
            callback_query.from_user.id,
            title=label,
            description=f"{label} –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±",
            payload=callback_query.data,
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter=callback_query.data
        )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_query.from_user.id}: {e}")
        await callback_query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.pre_checkout_query_handler(lambda q: True)
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ pre_checkout –¥–ª—è {pre_checkout_query.from_user.id}: {e}")

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    try:
        new_expiry = db.add_or_update_subscription(
            message.from_user.id,
            message.from_user.username,
            months=1,
            full_access=(message.successful_payment.invoice_payload=="subscription_full"),
            amount=message.successful_payment.total_amount,
            currency=message.successful_payment.currency
        )

        invite = await bot.create_chat_invite_link(chat_id=CHANNEL_ID, member_limit=1)
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {new_expiry.strftime('%d.%m.%Y') if new_expiry else '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}.\n\n"
            f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{invite.invite_link}",
            reply_markup=main_menu
        )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
				# ---------- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ----------
@dp.message_handler(state=SupportForm.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext):
    try:
        await bot.send_message(
            SUPPORT_USER_ID,
            f"üì© –ó–∞–ø—Ä–æ—Å –æ—Ç @{message.from_user.username or message.from_user.full_name} (ID {message.from_user.id}):\n\n{message.text}"
        )
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu)
    except exceptions.BotBlocked:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.finish()

# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ ----------
async def check_subscriptions():
    while True:
        for user_id, username, expiry_date, full_access, status in db.get_all_subscriptions():
            if full_access:
                continue  # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
            expiry = datetime.fromisoformat(expiry_date)
            days_left = (expiry - datetime.now()).days
            if days_left == 3:
                try:
                    await bot.send_message(user_id, "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è! –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∫–ª—É–±, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –º–µ—Å—è—Ü, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞, –∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!")
                except exceptions.BotBlocked:
                    pass
            elif expiry < datetime.now() and status == "active":
                try:
                    await bot.send_message(user_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏—Å—Ç–µ–∫.  –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –æ–ø–ª–∞—Ç–∏–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá.")
                    await bot.ban_chat_member(CHANNEL_ID, user_id)
                    await bot.unban_chat_member(CHANNEL_ID, user_id)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id}: {e}")
                db.expire_user(user_id)
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

# ---------- –°—Ç–∞—Ä—Ç ----------
async def on_startup(dp):
    asyncio.create_task(check_subscriptions())
    print("üåê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω.")

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)